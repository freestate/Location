#!/usr/bin/env perl
#
# Location
#	A tool which can discover your location by wlan!
use strict;
use warnings;
use 5.010;
use Getopt::Long;
use Config::Tiny;
use English qw( -no_match_vars );
use Text::Trim;
use IO::Handle;
use Array::Diff;
use Data::Dumper;

STDOUT->autoflush(1);    #workaround so that one can use print without \n

my $VERSION    = '0.3';
my $configpath = "$ENV{HOME}/.locationconf";
my $config     = Config::Tiny->new;

# Code Parts related to command line option parsing
my @add;
my $delete;
my $show;
my $showall;
my $scans = 1;
my $delay;
my $get;
my @update;
my $accuracy = '';
my $verbose;

if ( -e $configpath ) {
    $config   = Config::Tiny->read($configpath);
    $scans    = $config->{_}->{scans};
    $accuracy = $config->{_}->{accuracy};
    $config->{_}->{version} = $VERSION;
}
else {
    $config->{_}->{version}  = $VERSION;
    $config->{_}->{accuracy} = "ok";
    $config->{_}->{scans}    = 1;
    $config->write($configpath);
}

GetOptions(
    'h|help'      => sub { exec( 'perldoc', '-F', $0 ) },
    'a|add=s{3}'  => \@add,
    'd|delete=s'  => \$delete,
    's|show=s'    => \$show,
    'showall'     => \$showall,
    'update:s{2}' => \@update,
    'scans=i'     => \$scans,
    'delay=i'     => \$delay,
    'g|get=s'     => \$get,
    'accuracy=s'  => \$accuracy,
    'v|version' => sub { say "Location version $VERSION by Sebastian Muszytowski"; exit 0; },
    'verbose' => \$verbose,
) or exit 1;

if ( $scans < 1 ) { $scans = 1; }

if    (@add)                { add(); }
elsif (@update)             { update(); }
elsif ( defined($delete) )  { delentry(); }
elsif ( defined($show) )    { show(); }
elsif ( defined($showall) ) { showall(); }
elsif ( defined($get) )     { get(); }
else {
    say "usage: location [--help] [--add <name> <address> <station>] [--delete <name>] [--update <name> <mode>] [--show <name>] [--showall] [--scans <number>] [--delay <time in seconds>] [--get <name|address|station|all>] [--accuracy <ok|best>] [--verbose]";
}

sub add {
    my $name = $add[0];
    $config->{$name}->{mac}     = join( "|", do_scans($scans) );
    $config->{$name}->{address} = $add[1];
    $config->{$name}->{station} = $add[2];
    $config->write($configpath);
    if ( defined($verbose) ) {
        say "Added location \"$name\" to internal database!\nI found this mac addresses: "
          . implodemacs( $config->{$name}->{mac} );
    }
}

sub delentry {
    my $name = $delete;
    if ( $config->{$name} ) {
        delete $config->{$name};
        $config->write($configpath);
        say "Successfully deleted $name";
    }
    else {
        say "$name not found in internal database!";
    }
}

sub show {
    my $name = $show;
    if ( $config->{$name} ) {
        say "=== $name ===";
        say "Macs   : " . implodemacs( $config->{$name}->{mac} );
        say "Address: $config->{$name}->{address}";
        say "Station: $config->{$name}->{station}";
    }
    else {
        say "$name not found in internal database!";
    }
}

sub showall {
    while ( my ( $name, $section ) = each %{$config} ) {
        if ( $name ne "_" ) {
            say "=== $name ===";
            say "Macs   : " . implodemacs( $section->{mac} );
            say "Address: " . $section->{address};
            say "Station: " . $section->{station};
        }
    }
}

sub get {
    my @locs = getlocation();
    if (@locs) {
        foreach my $loc (@locs) {
            if ( $config->{$loc} ) {
                if ( ( $get eq "name" ) xor( $get eq "all" ) ) { say $loc; }
                if ( ( $get eq "address" ) xor( $get eq "all" ) ) {
                    say $config->{$loc}->{address};
                }
                if ( ( $get eq "station" ) xor( $get eq "all" ) ) {
                    say $config->{$loc}->{station};
                }
            }
        }
    }
    else {
        say "No Location found, try to change the accuracy or add this location.";
        exit 1;
    }
}

sub update {
    if ( scalar(@update) != 2 ) {
        say "--update needs 2 arguments. The name of the location to update and the update mode. See --help for more information!";
        exit 1;
    }
    my $location = $update[0];
    my $mode     = $update[1];
    if ( $location eq "current" ) {
        my @locations = getlocation();
        if ( !@locations ) {
            say "No location found which can be updated. Do use another name than \"current\"!";
            exit 1;
        }
        $location = shift(@locations);
    }
    if ( !$config->{$location} ) {
        say "The location you want to update does not exist. Try to use --add or check your spelling!";
        exit 1;
    }
    if ( ( $mode eq "a" ) or ( $mode eq "add" ) ) {
        my @confmacs = split( /\|/, $config->{$location}->{mac} );
        my @localmacs = do_scans($scans);
        foreach my $locmac (@localmacs) {
            push( @confmacs, $locmac );
        }
        my %machash = map { $_, 1 } @confmacs;
        my @newmacs = keys %machash;
        $config->{$location}->{mac} = join( "|", @newmacs );
        if ( defined($verbose) ) {
            say "Updated location named \"$location\" and the macs are now: "
              . implodemacs( $config->{$location}->{mac} );
        }
    }
    elsif ( ( $mode eq "o" ) or ( $mode eq "override" ) ) {
        $config->{$location}->{mac} = join( "|", do_scans($scans) );
        if ( defined($verbose) ) {
            say
              "Updated location named \"$location\" and the new macs are now: "
              . implodemacs( $config->{$location}->{mac} );
        }
    }
}

sub getlocation {
    my @returns;
    my @localmacs = do_scans($scans);
    if ( defined($verbose) ) {
        say "Macs found which are now used for comparison:";
        print Dumper @localmacs;
    }
    my @possiblelocations;
    while ( my ( $name, $section ) = each %{$config} ) {
        if ( $name ne "_" ) {
            foreach my $mymac (@localmacs) {
                if ( grep $_ eq $mymac, split( /\|/, $section->{mac} ) ) {
                    push( @possiblelocations, $name );
                }
            }
        }
    }
    if (@possiblelocations) {
        my %hash = map { $_, 1 } @possiblelocations;
        my @locations = keys %hash;
        foreach my $loc (@locations) {
            my @confmacs = split( /\|/, $config->{$loc}->{mac} );
            my $diff          = Array::Diff->diff( \@localmacs, \@confmacs );
            my $localmaccount = scalar(@localmacs);
            my $confmaccount  = scalar(@confmacs);
            if ( $accuracy eq "ok" ) {
                if ( $diff->count < $confmaccount ) {
                    push( @returns, $loc );
                }
            }
            else {
                if ( ( $confmaccount - $diff->count ) >= ( $confmaccount / 2 ) ) {
                    push( @returns, $loc );
                }
            }
        }
    }
    return @returns;
}

sub do_scans {
    my $times = shift(@_);
    my @macs  = ();
    for ( my $i = 1 ; $i <= $times ; $i++ ) {
        push( @macs, scan_environment() );
        if ( defined($delay) and ( $i != $times ) ) {
            for ( my $j = $delay ; $j >= 1 ; $j-- ) {
                if ( defined($verbose) ) {
                    print "Scan [$i/$times] | Delay [$j]    \r";
                }
                sleep 1;
            }
        }
    }
    if ( defined($verbose) ) {
        print "Successfully scanned environment for Access Points\n";
    }
    my %hash = map { $_, 1 } @macs;
    return keys %hash;
}

sub scan_environment {
    my @output =
      qx(sudo iwlist scan 2> /dev/null | grep -i 'Address' | cut -d ":" -f2-);
    trim @output;
    return @output;
}

sub implodemacs {
    my $macs = shift(@_);
    $macs =~ s/\|/ /g;
    return $macs;
}

__END__

=head1 NAME

Location - A tool which can discover your location with wlan!

=head1 SYNOPSIS

B<location> [--help] [--add I<name> I<address> I<station>] [--delete I<name>] 
[--show I<name>] [--update I<name>] [--scans I<number>] [--delay I<time in seconds>] 
[--get I<name|address|station|all>] [--accuracy I<ok|best>] [--verbose]

=head1 DESCRIPTION

Location can determine your location. To provide the service it scans available wlan networks
and compares the mac adresses of networks. 

=head1 OPTIONS

=over

=item B<--help>

Shows information on howto access this manpage

=item B<--add> I<name> I<address> I<station>

With this option a scan for available wireless networks is performed. This 
action should be combined with the B<--scans> and/or B<--delay> option.
If you want to cover a bigger area walk around a bit to get better results.
If you do not want to add a name or the address then run it like this:
location --add "" "" "foostation" --scans 4
To update an entry just run location --add with the same "name" argument. It will 
update everything accordingly.

=item B<--delete> I<name>

Deletes a previously scanned location from the internal database when I<name>
is found in the internal database.

=item B<--show> I<name>

Show all information about the given I<name> even if you are not at this
location.

=item B<--update> I<name> I<mode>

Updates the location. You can see which mac addresses were added when the 
verbose flag is set. If I<name> equals to "current" the current location will be 
determined first and then the database is updated. The I<mode> can be either 
"a" or "add" to add the found macs to the existing set of mac addresses or use 
"o" or "override" to override the existing macs for I<name> with the found mac addresses.

=item B<--scans> I<number>

Use I<number> to increase the number of scans (must be greater than 0). This 
option can only be used in combination with the I<--add> or I<--get> parameter.

=item B<--delay> I<time in seconds>

This option is only applied when I<--scans> is used. It adds a delay between
the scans. 

=item B<--get> I<name|address|station|all>

Gets the current location. The parameter is used to determine the output.
I<name> returns the name of the location, I<address> the address of the location,
and I<station> the saved train station. I<all> returns all values seperated by
newlines.

=item B<--accuracy> I<ok|best>

Sets the accuracy. This option is only applied when the I<--get> action is used.
In the I<ok> level just one wlan router is enough to determine the current location.
In the I<best> level at least 50% of the networks must be present. It is recommend
that one uses the I<ok> level (since this level is the default).

=item B<--verbose>

Force verbose output. 

=back

=head1 CONFIGURATION

See the .locationconf in your home-directory. It will be added after first start.

=head1 AUTHOR

Copyright (C) 2010,2011 by Sebastian Muszytowski E<lt>sebastian@muszytowski.netE<gt>

